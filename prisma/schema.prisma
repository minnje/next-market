generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  github String? @unique
  avatar String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  products Product[]
  posts Post[]
  comments Comment[]
  likes Like[]
  chat_rooms ChatRoom[]
  messages Message[]
}

model Product{
  id Int @id @default(autoincrement())
  title String
  price Float
  description String
  photo String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Post{
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  comments Comment[]
  likes Like[]
}


model Comment{
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Like{
  @@id(name:"id", [userId,postId])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId Int
}

model ChatRoom{
  id String @id @default(cuid())
  users User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  messages Message[]
}

model Message{
  id Int @id @default(autoincrement())
  payload String
  room ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User   @relation(fields: [userId], references: [id])
userId Int
}